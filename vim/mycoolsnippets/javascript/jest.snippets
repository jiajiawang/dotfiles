snippet mock "jest mock" b
jest.mock("$1");
endsnippet

snippet mocko "jest mock object" b
jest.mock("$1", () => ({$2}));
endsnippet

snippet mockf "jest mock fn" b
jest.mock("$1", () => jest.fn());
endsnippet

snippet sf "subject().find()"
subject().find("$1")
endsnippet

snippet expe ".toEqual()"
expect(subject()).toEqual($1);
endsnippet

snippet expb ".toBe()"
expect(
  subject().find("$1")
).toBe($2);
endsnippet

snippet expbp "expect().toExist" b
expect(
  subject().find("$1")
).toExist();
endsnippet

snippet expbe "expect().not.toExist" b
expect(
  subject().find("$1")
).not.toExist();
endsnippet

snippet exphc "expect().toHaveClassName" b
expect(
  subject().find("$1")
).toHaveClassName("$2");
endsnippet

snippet exphp "expect().toHaveProp" b
expect(
  subject().find("$1")
).toHaveProp("$2", $3);
endsnippet

snippet expht "expect().toHaveText" b
expect(
  subject().find("$1")
).toHaveText("$2");
endsnippet

snippet exphbc "epext().toHaveBeenCalled()"
expect($1).toHaveBeenCalled()
endsnippet

snippet exphbcw "epext().toHaveBeenCalledWith()"
expect($1).toHaveBeenCalledWith($2)
endsnippet

snippet expms "expect(subject()).toMatchSnapshot" b
expect(subject()).toMatchSnapshot();
endsnippet

snippet expfms "expect(subject().find()).toMatchSnapshot" b
expect(
  subject().find("$1")
).toMatchSnapshot();
endsnippet

snippet expo "scheduler.expectObservable(subject()).toBe"
scheduler.expectObservable(subject()).toBe("--$1a", {
  a: ${2:action()}
});
endsnippet
