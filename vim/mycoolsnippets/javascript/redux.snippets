global !p
from snippets_helpers import *
endglobal

snippet reducer "reducer" b
const ${1:reducer} = (state = {
  $2
}, action) => {
  switch (action.type) {
    case '$3':
      $4
    default:
      return state;
  }
}
endsnippet

snippet epic "redux epic" b
function $1Epic(action$${2:, state$}$3) {
  return action$.pipe(
    ofType(`!p snip.rv = to_upper_case(t[1])`),
    switchMap(($4) => $5)
  );
}
endsnippet

snippet at "action type" b
export const `!p snip.rv = to_upper_case(t[2])` = "$1/$2";
endsnippet

snippet ats "action types" b
export const `!p snip.rv = to_upper_case(t[2])` = "$1/$2";
export const `!p snip.rv = to_upper_case(t[2])`_FAILURE = "$1/$2-failure";
export const `!p snip.rv = to_upper_case(t[2])`_SUCCESS = "$1/$2-success";
endsnippet

snippet action "redux action" b
export const `!p snip.rv = to_upper_case(t[1])` = "$${2:{namespace}}/`!p snip.rv = to_kebab_case(t[1])`";
export function $1Action(data) {
  return {
    type: `!p snip.rv = to_upper_case(t[1])`,
    data
  };
}
endsnippet

snippet actions "redux ajax actions" b
export const `!p snip.rv = to_upper_case(t[1])` = "$2`!p snip.rv = to_kebab_case(t[1])`";
export const `!p snip.rv = to_upper_case(t[1])`_FAILURE = "$2`!p snip.rv = to_kebab_case(t[1])`-failure";
export const `!p snip.rv = to_upper_case(t[1])`_SUCCESS = "$2`!p snip.rv = to_kebab_case(t[1])`-success";

export function $1Action(data) {
  return {
    type: `!p snip.rv = re.sub('([A-Z]+)', r'_\1', t[1]).upper()`,
    data
  };
}

export function $1FailureAction(data) {
  return {
    type: `!p snip.rv = re.sub('([A-Z]+)', r'_\1', t[1]).upper()`_FAILURE,
    data
  };
}

export function $1SuccessAction(data) {
  return {
    type: `!p snip.rv = re.sub('([A-Z]+)', r'_\1', t[1]).upper()`_SUCCESS,
    data
  };
}
endsnippet

snippet dispatch "dispatchToProps"
$1($2) {
  return dispatch(${4:$1}Action(${3:$2}));
},
endsnippet

snippet reducertests "reducer tests" b
import deepFreeze from "deep-freeze";
import reducer from "reducers/$1";
import { $2 } from "actions/$1-actions";

describe("$1", () => {
  let currentState;
  let subject;
  let actionType;
  let actionData;

  beforeEach(() => {
    currentState = {};
    subject = () => reducer(deepFreeze(currentState), {
      type: actionType,
      data: actionData
    });
  });

  it("has default state", () => {
    expect(
      reducer(undefined, {})
    ).toEqual({
      $3
    });
  });
});
endsnippet

snippet itres "reducer test"
it("responds to $1 action", () => {
  actionType = $1;
  actionData = $2;
  currentState = $3;
  expect(subject()).toEqual({$4});
})
endsnippet

snippet epictests "epic tests" b
import { ActionsObservable, StateObservable } from "redux-observable";
import { TestScheduler } from "rxjs/testing";
import observerDeepEqualAssert from "test-utils/observer-deep-equal-assert";
import epics from "epics/$1-epics";
import api from "api/$2";
import { $3 } from "actions/$1-actions";

jest.mock("api/$2", () => ({
  $4: jest.fn()
}));

describe("$1 epics", () => {
  let action$;
  let subject;
  let scheduler;
  let state$;

  beforeEach(() => {
    scheduler = new TestScheduler(observerDeepEqualAssert);
    state$ = { value: jest.fn() };
  });

  afterEach(() => {
    scheduler.flush();
  });

  $5
});
endsnippet
snippet epictest "epic test"
describe("$1Epic", () => {
  beforeEach(() => {
    subject = () => epics.$1Epic(action$, state$);
    action$ = new ActionsObservable(
      scheduler.createHotObservable("--a", {
        a: $1Action($2),
      })
    );
  });

  it("emits `!p snip.rv = to_upper_case(t[1])`_SUCCESS action", () => {
    scheduler.expectObservable(subject()).toBe("--a", {
      a: $1Success($3),
    });
  });
});
endsnippet

snippet epicapi "epic api test"
context("when api call success", () => {
  beforeEach(() => {
    api.${1:get}.mockReturnValue(
      scheduler.createColdObservable("--(a|)", {
        a: ${2:""},
      })
    );
  });

  it("emits `!p snip.rv = to_upper_case(t[3])` action", () => {
    scheduler.expectObservable(subject()).toBe("----a", {
      a: $3Action($4),
    });
  });
});
endsnippet

snippet apimock "mock api return value"
${1:api}.${2:get}.mockReturnValue(
  scheduler.createColdObservable("--(a|)", {
    a: ${3:""},
  })
);
endsnippet

snippet apimocke "mock api error"
${1:api}.${2:get}.mockReturnValue(
  scheduler.createColdObservable("--(#|)", null, {
    status: ${3:422},
	response: ${4:{ errors: $5 }}
  })
);
endsnippet
