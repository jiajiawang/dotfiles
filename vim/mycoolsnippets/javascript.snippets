snippet re "require" b
var ${1:http} = require('${2:$1}');$0
endsnippet

snippet it "Mocha it" b
it("$1", () => {
  $0
});
endsnippet

snippet desc "Mocha describe" b
describe("$1", () => {
  $0
});
endsnippet

snippet af "arrow function" w
($1) => {$0}
endsnippet

snippet exp "Mocha expectation" b
expect($1).to
endsnippet

snippet cont "Mocha context" b
context("$1", () => {
  $0
});
endsnippet

snippet be "Mocha beforeEach" b
beforeEach(() => {
  $0
});
endsnippet

snippet ae "Mocha afterEach" b
afterEach(() => {
  $0
});
endsnippet

snippet debug "JSON.stringfy" b
console.log(JSON.stringify(subject(), null, 2));
endsnippet

snippet rcc "React createClass" b
var ${1:ClassName} = React.createClass({
  render: function() {
    return (
      ${VISUAL}$2
    )
  }
});
endsnippet

snippet var "var" b
var ${1:name} = $2;
$0
endsnippet

snippet f "function()" w
function($1) {
  $2
}
endsnippet

snippet forEach "forEach" b
forEach(function(_, i) {
  $1
});
endsnippet

snippet gdiv "Grid div" b
<div className="narrow-col-${1:4} standard-col-${2:12} wide-col-${3:16}$4">
  $0
</div>
endsnippet


# React

snippet Component "React Component" b
import React from "react";

export default class Component extends React.Component {
  displayName: "${1:Name}"

  componentDidMount() {
  }

  render() {
    return (
      $2
    );
  }
}

Component.propTypes = {
};

Component.defaultProps = {
};

export { Component };
endsnippet

snippet chai "chai" b
import R from "ramda";
import React from "react";
import { shallow } from "enzyme";
import { TestScheduler, ReactiveTest } from "rx";
import rewire from "utils/rewire";

import { Component, __RewireAPI__ } from "$1";

import chaiEnzyme from "chai-enzyme";
chai.use(chaiEnzyme());

const { onNext, onError, onCompleted } = ReactiveTest;

describe("$2", () => {
  let subject;
  let props;
  let reactContext;
  let rewireSandbox;
  let actions;
  let store;
  let scheduler;
  let http;

  beforeEach(() => {
    props = {};
    reactContext = {};

    scheduler = new TestScheduler();
    http = { put: sinon.stub() };

    http.put.returns(scheduler.createColdObservable(
      onNext(100, { response: {}}),
      onCompleted(100)
    ));

    subject = R.memoize(() => shallow(
      <Component { ...props }/>,
      { context: reactContext }
    ));

    store = {
      getState: sinon.stub().returns("state")
    };

    actions = {
      updateProfile: sinon.stub(),
      saveProfile: sinon.stub()
    };

    rewireSandbox = rewire(__RewireAPI__);
    rewireSandbox.stub({
      Store: store,
      Actions: actions
    });
  });

  afterEach(() => {
    scheduler.stop();
    rewireSandbox.restore();
  });

  it("connects to Store", () => {
    expect(Component.getStores()).to.include(store);
  });

  it("gets props from Store state", () => {
    expect(Component.getPropsFromStores()).to.equal("state");
  });
  it("renders without errors", () => {
    expect(subject()).to.be.present();
  });

  $0
endsnippet
