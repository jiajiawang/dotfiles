global !p
from snippets_helpers import *
endglobal

snippet re "require" b
var ${1:http} = require('${2:$1}');$0
endsnippet

snippet it "Mocha it" b
it("$1", () => {
  $2
});$0
endsnippet

snippet desc "Mocha describe" b
describe("$1", () => {
  $0
});
endsnippet

snippet af "arrow function" w
($1) => $0
endsnippet

snippet exp "Mocha expectation" b
expect($1).to
endsnippet

snippet cont "Mocha context" b
context("$1", () => {
  beforeEach(() => {
    $2
  });
  ${0:${VISUAL}}
});
endsnippet

snippet be "Mocha beforeEach" b
beforeEach(() => {
  $0
});
endsnippet

snippet ae "Mocha afterEach" b
afterEach(() => {
  $0
});
endsnippet

snippet debug "JSON.stringfy" b
console.log(JSON.stringify(subject(), null, 2));
endsnippet

snippet rcc "React createClass" b
var ${1:ClassName} = React.createClass({
  render: function() {
    return (
      ${VISUAL}$2
    )
  }
});
endsnippet

snippet var "var" b
var ${1:name} = $2;
$0
endsnippet

snippet f "function()" w
function($1) {
  $2
}
endsnippet

snippet forEach "forEach" b
forEach(function(_, i) {
  $1
});
endsnippet

snippet gdiv "Grid div" b
<div className="narrow-col-${1:4} standard-col-${2:12} wide-col-${3:16}$4">
  $0
</div>
endsnippet


# React

snippet ComponentAlt "Alt Component" b
import React from "react";
import connectToStores from "alt/utils/connectToStores";

import Store from "stores/$2-store";
import Actions from "actions/$2-actions";

class Component extends React.Component {
  static getStores() {
    return [Store];
  }

  static getPropsFromStores() {
    return Store.getState();
  }

  componentDidMount() {
  }

  render() {
    return (
      $0
    );
  }
}
Component.displayName = "${1:Name}";

Component.propTypes = {
};

Component.defaultProps = {
};

export default connectToStores(Component);
export { Component };
endsnippet

snippet Store "Alt Store" b
import alt from "dispatcher";
import Actions from "actions/$2";

class Store {
  constructor() {
    this.bindActions(Actions);
    this.state = {
      $0
    };
  }
}

export default alt.createStore(Store, "$1Store");
export { Store };
endsnippet

snippet Actions "Alt Actions" b
import alt from "dispatcher";

class Actions {
  constructor() {
    this.generateActions(
      $0
    );
  }
}

export default alt.createActions(Actions);
endsnippet

snippet ComponentTest "Test Component" b
import R from "ramda";
import React from "react";
import { shallow } from "enzyme";
import rewire from "test-utils/rewire";

import $1 from "components/$2`!p snip.rv = re.sub('((?<!^)[A-Z])', r'-\1', t[1]).lower()`";

import chaiEnzyme from "chai-enzyme";
chai.use(chaiEnzyme());

describe("$1", () => {
  let subject;
  let props;
  let rewireSandbox;

  beforeEach(() => {
    props = {};
    rewireSandbox = rewire($1);
    rewireSandbox.stub({
      styles: {
      }
    });
    subject = R.memoize(() => shallow(<$1 { ...props }/>));
  });

  afterEach(() => {
    rewireSandbox.restore();
  });

  $0
});
endsnippet

snippet ComponentAltTest "Test Component" b
import R from "ramda";
import React from "react";
import { shallow } from "enzyme";
import rewire from "utils/rewire";

import { Component, __RewireAPI__ } from "$1";

import chaiEnzyme from "chai-enzyme";
chai.use(chaiEnzyme());

describe("$2", () => {
  let subject;
  let props;
  let reactContext;
  let rewireSandbox;
  let Actions;
  let Store;

  beforeEach(() => {
    props = {};
    reactContext = {};

    subject = R.memoize(() => shallow(
      <Component { ...props }/>,
      { context: reactContext }
    ));

    Store = {
      getState: sinon.stub().returns("state")
    };

    Actions = {
      $3: sinon.stub()
    };

    rewireSandbox = rewire(__RewireAPI__);
    rewireSandbox.stub({
      Store,
      Actions
    });
  });

  afterEach(() => {
    rewireSandbox.restore();
  });

  it("connects to Store", () => {
    expect(Component.getStores()).to.include(Store);
  });

  it("gets props from Store state", () => {
    expect(Component.getPropsFromStores()).to.equal("state");
  });

  $0
});
endsnippet

snippet StoreTest "Alt Store Test" b
import alt from "dispatcher";
import testableStore from "utils/test/testable-store";
import rewire from "utils/rewire";

import { Store, __RewireAPI__ } from "stores/$1";

describe("$1", () => {
  let store;
  let subject;
  let rewireSandbox;

  beforeEach(() => {
    rewireSandbox = rewire(__RewireAPI__);
    store = testableStore(alt, Store);
  });

  afterEach(() => {
    rewireSandbox.restore();
  });
});
endsnippet

snippet itrenders "it renders" b
it("renders $1", () => {
  expect(
    subject().find("$2")$3
  ).to.be.${4:present()};
});
endsnippet

snippet expfind "expect find" b
expect(
  subject()
    .find("$1")
    .filter({ $2 })
).to.be.present();
endsnippet

# react native
snippet ss "stylesheet" b
const styles = StyleSheet.create({
  $1
});
endsnippet

snippet 'const (\w+)' "action types" r
const `!p snip.rv = match.group(1).upper()` = "${1:`!p snip.rv = match.group(1).upper()`}";$0
endsnippet

snippet .do "rx do" b
.do((e) => { console.log("$0"); })
endsnippet

snippet iee "chai it expect equal" b
it("$1", () => {
  expect($2).to.equal(${3:true});
});
endsnippet

snippet ee "chai expect equal" b
expect($1).to.equal(${2:true});
endsnippet

snippet ede "chai expect equal" b
expect($1).to.eql(${2:true});
endsnippet

snippet descs "describe store.onX" b
describe("$1", () => {
  beforeEach(() => {
    subject = () => store.$1($2);
  });
});
endsnippet

snippet const "const" b
const { $1 } = ${2:this.props};
endsnippet

snippet itres "reducer it" b
it("responds to the $1 action", () => {
  const currentState = deepFreeze({$3});
  const newState = currentBrandReducer(currentState, {
    type: "$1"$2
  });
  expect(newState).to.eql({$4});
});
endsnippet
