global !p
from snippets_helpers import *
endglobal

snippet p "params[:name]" w
params[:${1:name}]$0
endsnippet

snippet descaction "rspec describe action" b
describe "${1:GET} #${2:action}" do
  it "responds successfully with an HTTP 200 status code" do
    ${1/.*/\L$0\E/} :$2
    expect(response).to be_success
    expect(response).to have_http_status(200)
  end

  it "renders the $2 template" do
    ${1/.*/\L$0\E/} :$2
    expect(response).to render_template("$2")
  end

  it "loads all of the ${3:object} into @$3s" do
    ${1/.*/\L$0\E/} :$2
    expect(assigns(:$3s)).to match_array($4)
  end
end
endsnippet

snippet it200 "rspec it respondes 200" b
it 'responds successfully with an HTTP 200 status code' do
  get :${1:action}
  expect(response).to be_success
  expect(response).to have_http_status(200)
end
endsnippet

snippet fi "fill_in" b
fill_in "$1", with: "$2"
endsnippet

snippet cl "click_link" b
click_link '$1'
endsnippet

snippet cb "click_button" b
click_button '$1'
endsnippet

snippet fsl "frozen_string_literal" b
# frozen_string_literal: true
endsnippet

snippet paramb "paramb" b
parameter do
  key :name, $1
  key :in, :$2`!p snip.rv = autocomplete(t[2], ["query", "path"])`
  key :description, "$3"
  key :type, :$5`!p snip.rv = autocomplete(t[5], ["integer", "boolean", "string", "object", "array"])`
  key :required, $6`!p snip.rv = bool(t[6])`
end
endsnippet

snippet paramn "new parameter" b
parameter $1,
          name: :$2,
          in: :$3`!p snip.rv = autocomplete(t[3], ["query", "path"])`,
          description: "$4",
          type: :$5`!p snip.rv = autocomplete(t[5], ["integer", "boolean", "string", "object", "array"])`,
          required: $6`!p snip.rv = bool(t[6])`
endsnippet

snippet parami "inline parameter" b
parameter name: :$2,
          in: :$3`!p snip.rv = autocomplete(t[3], ["query", "path"])`,
          description: "$4",
          type: :$5`!p snip.rv = autocomplete(t[5], ["integer", "boolean", "string", "object", "array"])`,
          required: $6`!p snip.rv = bool(t[6])`
endsnippet

snippet prop "property" b
property :$1 do
  key :type, :$5`!p snip.rv = autocomplete(t[5], ["integer", "boolean", "string", "object", "array"])`
end$0
endsnippet
